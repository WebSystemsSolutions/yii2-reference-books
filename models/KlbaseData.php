<?php

namespace common\components\klbase\models;

use Yii;
use yii\db\ActiveRecord;
use yii\behaviors\TimestampBehavior;
use yii\behaviors\BlameableBehavior;

use common\components\klbase\TypeHelper;
use common\components\klbase\Main;

/**
 * This is the model class for table "{{%klbase_data}}".
 *
 * @property integer $id
 * @property string $base
 * @property integer $data_id
 * @property string $value
 * @property string $title
 * @property string $fields
 * @property integer $relation
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $created_by
 * @property integer $updated_by
 */
class KlbaseData extends ActiveRecord
{

    // Конфигуратор Справочника
    private $directoryConfig;

    // Зависимый справочник
    private $relationObj;

    // Пользовательское имя формы
    public $customFormName = null;

    // Системное имя Справочника
    public $baseName;



    /**
     * @return null|string
     */
    public function formName()
    {
        if( $this->customFormName == null ) {
            return parent::formName(); // TODO: Change the autogenerated stub
        }else{
            return $this->customFormName;
        }
    }


    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%klbase_data}}';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
            BlameableBehavior::className(),
        ];
    }

    /**
     * @param $baseName
     */
    public function init()
    {
        if($this->baseName != null ) {
            // Устанавливаем наименование Справочника
            $this->base = $this->baseName;
            // Конфигуратор Справочника
            $this->directoryConfig = Yii::$app->klbase->getDirectory($this->baseName);

            if( $this->directoryConfig['relation'] != '' ){
                $relationName = Main::baseNameInflectorInToExt($this->directoryConfig['relation']);
                $this->relationObj =  Yii::$app->klbase->$relationName;
            }
        }

        parent::init(); // TODO: Change the autogenerated stub
    }

    public function beforeValidate()
    {
        // Валидация динамические поля
        foreach ($this->directoryConfig['fields'] as $field) {
            $propName = 'ext_' . $field['name'];
            if($this->fields[$propName] == null && $field['required']){
                $this->addError('fields['.$propName.']', Yii::t('yii', '{attribute} cannot be blank.', ['attribute' => $field['title']]));
            }
            if( ! TypeHelper::validation($field['type'], $this->fields[$propName]) ){
                $this->addError('fields['.$propName.']', TypeHelper::$errors);
            }
        }

        $data = null;
        // Читаем динамические поля
        foreach ($this->directoryConfig['fields'] as $field) {
            $propName = 'ext_' . $field['name'];
            $data[$propName] = $this->fields[$propName];
        }
        // Сериализируем
        $this->fields = serialize($data);


        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }


    /**
     *
     * После нахождения
     */
    public function afterFind()
    {
        if( trim($this->fields) != '' ){
            $this->fields = unserialize($this->fields);
        }

        // Устанавливаем наименование Справочника
        $this->baseName = $this->base;
        // Конфигуратор Справочника
        $this->directoryConfig = Yii::$app->klbase->getDirectory($this->baseName);

        if( $this->directoryConfig['relation'] != '' ){
            $relationName = Main::baseNameInflectorInToExt($this->directoryConfig['relation']);
            $this->relationObj =  Yii::$app->klbase->$relationName;
        }

        parent::afterFind(); // TODO: Change the autogenerated stub
    }


    /**
     * @return array
     *
     * Возвращаем список виртуальных полей
     */
    public function getVirtualFieldList()
    {
        return $this->directoryConfig['fields'];
    }




    /**
     * @inheritdoc
     */
    public function rules()
    {
        $rules = [
            [['base', 'value'], 'required', 'when' => function($model) {

                // Если не задан заголовок, присваиваем значение
                if(trim($model->title) == ''){
                    $this->title = $model->value;
                }

                // Если переданно значение Проверяем на уникальность
                if($model->data_id != null) {
                    $one = self::find()->where(['base' => $model->base, 'data_id' => $model->data_id])->one();
                    if ($one == null) return;

                    if ($this->isNewRecord) {
                        $model->addError('data_id', Yii::t('klbase', 'ID values must be unique, leave it blank and it will be assigned automatically'));
                    } else {
                        if ($model->id != $one->id) {
                            $model->addError('data_id', Yii::t('klbase', 'ID values must be unique, leave it blank and it will be assigned automatically'));
                        }
                    }
                }else{
                // Генерируем уникальный data_id
                    $max = self::find()->where(['base' => $model->base])->max('data_id');
                    $this->data_id = $max + 1;
                }
            }],
            [['data_id', 'relation', 'created_at', 'updated_at', 'created_by', 'updated_by'], 'integer'],
            [['base'], 'string', 'max' => 14],
            [['value', 'title'], 'string', 'max' => 100],
            [['fields'], 'string', 'max' => 2400],
        ];

        return $rules;
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        $labels =  [
            'id' => 'ID',
            'base' => Yii::t('klbase', 'Klbase'),
            'data_id' => 'ID',
            'value' => Yii::t('main', 'Value'),
            'title' => Yii::t('main', 'Title'),
            'fields' => Yii::t('klbase', 'Ext fields'),
            'relation' => Yii::t('klbase', 'Relation'),
            'created_at' => Yii::t('main', 'Time of creation'),
            'updated_at' => Yii::t('main', 'Time of change'),
            'created_by' => Yii::t('main', 'Creator'),
            'updated_by' => Yii::t('main', 'Editor'),
        ];


        return $labels;
    }


    /**
     * @return null
     *
     * Возвращает значение (title) зависимого справочника
     */
    public function getRelationTitle()
    {
        if( $this->relationObj != null ){
            return $this->relationObj->getTitle($this->relation);
        }else{
            return null;
        }
    }

    /**
     * @param $base
     * @return $this
     */
    public static function findBase($base)
    {
        return self::find()->where(['base' => $base]);
    }
}
